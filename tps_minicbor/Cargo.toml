# Copyright (c) 2020-2023 Qualcomm Innovation Center, Inc. All rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software
# and associated documentation files (the “Software”), to deal in the Software without
# restriction, including without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice (including the next
# paragraph) shall be included in all copies or substantial portions of the
# Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
# BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# rs_minicbor package definition

[package]
name = "tps_minicbor"
version = "0.5.1"
authors = ["Jeremy O'Donoghue<quic_jodonogh@quicinc.com"]
edition = "2018"
license = "MIT"
description = "A CBOR encoder and decoder suitable for `no_std` embedded targets."
homepage = "https://globalplatform.org"
repository = "https://github.com/GlobalPlatform/TPS-API-Reference-Implementations"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[[example]]
name = "decode"
required-features = ["full"]

[[example]]
name = "trivial_cose"
required-features = ["full"]

# tps_minicbor can be built in the following variants:
# - default: (no_std) No allocator or standard library required. Logging, standard tags
#   not allowed as a consequence since these require an allocator.
# - full: (std) Requires standard library. Optionally supports logging, indefinite length messaging and a
#   higher-level API which can be easier to use.
# - float: (no_std) Support floats in addition to default features
[features]
full = ["std", "float", "tags"]
default = []

trace = ["std"]                                     # Perform tracing on function entry/exit (for debug). Requires std
tags = ["dep:chrono"]                               # Support standardized tags
std = []                                            # Standard library available
float = []                                          # Support floating point operations

# Where dependencies are dual-licensed, this project uses the MIT license
[dependencies]
thiserror = "1.0.37"                                # Dual-licensed, MIT or Apache-2.0
half = "2.1.0"                                      # Dual-licensed, MIT or Apache-2.0
func_trace = "1.0.3"                                # MIT licensed
chrono = { version = "0.4.22", optional = true }    # Dual-licensed, MIT or Apache-2.0

# The below dependencies are needed to buidl/run the trivial_cose examples
p256 = { version = "0.11.1", features = ["arithmetic", "ecdsa", "ecdsa-core"] } # Dual-licensed: MIT or Apache-2.0
crypto-bigint = "0.4.9"                             # Dual-licensed, MIT or Apache-20.

[profile.release]
opt-level = 'z'   # Optimize for size.
lto = true        # Link time optimization
codegen-units = 1 # Optimize for size at expense of compile time
panic = "abort"   # No unwinding
