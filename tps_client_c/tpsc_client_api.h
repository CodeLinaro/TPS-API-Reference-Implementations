/***************************************************************************************************
 * Copyright (c) 2022, Qualcomm Innovation Center, Inc. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the “Software”), to deal in the Software without
 * restriction, including without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 **************************************************************************************************/
 /***************************************************************************************************
 * tpsc_client_api.h
 *
 * This is the C language header file for the TPS Client API.
 *
 **************************************************************************************************/
 

#ifndef tpsc_client_api_h
#define tpsc_client_api_h

#pragma once

/* Generated with cbindgen:0.21.0 */

/*****                            AUTOGENERATED FILE - DO NOT EDIT                            *****/


#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>
/**
 * The NIL UUID is used where a UUID is required and no value is known.
 */
#define TPSC_UUID_NIL {.bytes = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }}

/**
 * UUID_NAMESPACE is the UUID used to derive other UUIDs in the TPS Client API namespace
 */
#define TPSC_UUID_NAMESPACE {.bytes = { 0x99, 0x13, 0x67, 0x3c, 0x23, 0x32, 0x42, 0x2c,0x82, 0x13, 0x1e, 0xc1, 0xf7, 0x49, 0x36, 0xe8 }}

/**
 * Indicates tps-secure-component-type "GPD-TEE"
 */
#define TPSC_UUID_SC_TYPE_GPD_TEE {.bytes = { 0x59, 0x84, 0x68, 0x75, 0x1e, 0x02, 0x53, 0xc8,0x92, 0x2f, 0x5d, 0x60, 0xdd, 0x10, 0x3a, 0x58 }}

/**
 * Indicates tps-secure-component-type "GPC-SE"
 */
#define TPSC_UUID_SC_TYPE_GPC_SE {.bytes = { 0xbd, 0xd6, 0x58, 0xfa, 0x44, 0xc1, 0x5e, 0x59,0xb3, 0xa1, 0x1a, 0x8f, 0x03, 0x8c, 0xeb, 0x50 }}

/**
 * Indicates tps-secure-component-type "GPP-REE"
 */
#define TPSC_UUID_SC_TYPE_GPP_REE {.bytes = { 0xd2, 0xdc, 0x12, 0x0c, 0x3e, 0x4a, 0x5b, 0x1f,0xbe, 0xce, 0xdf, 0x38, 0x25, 0xc9, 0x33, 0xae }}


/**
 * The operation was successful.
 */
#define TPSC_SUCCESS 0

/**
 * Error with non-specific cause.
 */
#define TPSC_ERROR_GENERIC 4027121664

/**
 * Error due to insufficient access privileges.
 */
#define TPSC_ERROR_ACCESS_DENIED 4027121665

/**
 * The operation was cancelled.
 */
#define TPSC_ERROR_CANCEL 4027121666

/**
 * Error due to incorrectly formatted input data.
 */
#define TPSC_ERROR_BAD_FORMAT 4027121667

/**
 * The requested operation is specified and should exist, but is not yet implemented.
 */
#define TPSC_ERROR_NOT_IMPLEMENTED 4026531844

/**
 * The requested operation is valid, but not supported by this implementation.
 */
#define TPSC_ERROR_NOT_SUPPORTED 4027121669

/**
 * The requested operation failed because expected data was missing.
 */
#define TPSC_ERROR_NO_DATA 4027121670

/**
 * The requested operation failed because the system ran out of memory resources.
 */
#define TPSC_ERROR_OUT_OF_MEMORY 4027121671

/**
 * The requested operation failed because the system was busy.
 */
#define TPSC_ERROR_BUSY 4027121672

/**
 * The requested operation failed due to a communication error with the service implementation.
 */
#define TPSC_ERROR_COMMUNICATION 4027121673

/**
 * A security fault was detected. The integrity of the returned value cannot be guaranteed.
 */
#define TPSC_ERROR_SECURITY 4027121674

/**
 * The supplied buffer is too small to contain the requested data.
 */
#define TPSC_ERROR_SHORT_BUFFER 4027121675

/**
 * The called API is deprecated. Caller can assume that the returned result is valid and correct.
 */
#define TPSC_ERROR_DEPRECATED 4027121676

/**
 * The supplied UUID is not recognised for the requested usage
 */
#define TPSC_ERROR_BAD_IDENTIFIER 4027121677

/**
 * A NULL pointer was passed by the caller where a valid pointer is required
 */
#define TPSC_ERROR_NULL_POINTER 4027121678

/**
 * A Function was called when the API was in the wrong state
 */
#define TPSC_ERROR_BAD_STATE 4027121679

/**
 * No login data is provided: client is unauthenticated.
 */
#define TPSC_LOGIN_PUBLIC 0

/**
 * The client is authenticated based on the platform user identity (uid on Unix system)
 */
#define TPSC_LOGIN_USER 1

/**
 * The client is authenticated based on the platform group identity (gid on Unix system)
 */
#define TPSC_LOGIN_GROUP 2

/**
 * The client is authenticated based on the application identity provided by the platform.
 */
#define TPSC_LOGIN_APPLICATION 1

/**
 * The client is authenticated based on the platform user identity (uid on Unix system) and the
 * application identity provided by the platform.
 */
#define TPSC_LOGIN_USER_APPLICATION 1

/**
 * The client is authenticated based on the platform group identity (gid on Unix system) and
 * the application identify provided by the platform.
 */
#define TPSC_LOGIN_GROUP_APPLICATION 2

/**
 * No additional data is required for a `TPSC_ConnectionData` structure
 */
#define TPSC_CONNECTIONDATA_NONE 0

/**
 * The `TPSC_ConnectionData` structure includes a UNix Group ID (gid)
 */
#define TPSC_CONNECTIONDATA_GID 1

/**
 * This is the last value reserved in the standard for `TPSC_ConnectionData` additional
 * information.
 */
#define TPSC_CONNECTIONDATA_LAST_ITEM 2147483647

typedef struct {
    uint32_t guard;
} TPSC_MessageBufferPriv;

/**
 * TPSC_Transaction is a container for TPS Service Request and Response messages.
 */
typedef struct {
    /**
     * Mutable pointer to the message buffer
     */
    uint8_t *message;
    /**
     * Size of the message
     */
    uintptr_t size;
    /**
     * Size of the message buffer
     */
    uintptr_t maxsize;
    /**
     * Internal implementation defined data. The caller must not access this information.
     */
    TPSC_MessageBufferPriv imp;
} TPSC_MessageBuffer;

/**
 * TPSC_UUID encapsulates a UUID value
 */
typedef struct {
    uint8_t bytes[16];
} TPSC_UUID;

typedef struct {
    uint32_t connection_id;
    uint32_t guard;
} TPSC_SessionPriv;

/**
 * TPSC_Session denotes an active session between a TPS Client and a TPS Service implementation.
 */
typedef struct {
    /**
     * TPS Service being used in this session.
     */
    const TPSC_UUID *service_id;
    /**
     * Session ID
     */
    uint32_t session_id;
    /**
     * Internal implementation defined data. The caller must not access this information
     */
    TPSC_SessionPriv imp;
} TPSC_Session;

/**
 * Connection information used to establish a connection to a Secure Component.
 */
typedef enum {
    None,
    GID,
    Proprietary,
} TPSC_ConnectionData_Tag;

typedef struct {
    TPSC_ConnectionData_Tag tag;
    union {
        struct {
            uint32_t gid;
        };
        struct {
            const void *proprietary;
        };
    };
} TPSC_ConnectionData;

/**
 * TPSC_ServiceVersion defines the version of a TPS Service following semantic versioning rules.
 */
typedef struct {
    /**
     * The major version of a TPS Service, according to
     * [Semantic Versioning](https://semver.org/)
     */
    uint32_t major_version;
    /**
     * The minor version of a TPS Service, according to
     * [Semantic Versioning](https://semver.org/)
     */
    uint32_t minor_version;
    /**
     * The patch version of a TPS Service, according to
     * [Semantic Versioning](https://semver.org/)
     */
    uint32_t patch_version;
} TPSC_ServiceVersion;

/**
 * TPSC_ServiceBounds specifies service version bounds. Bounds may be inclusive or exclusive.
 */
typedef enum {
    Inclusive,
    Exclusive,
    NoBounds,
} TPSC_ServiceBounds_Tag;

typedef struct {
    TPSC_ServiceBounds_Tag tag;
    union {
        struct {
            TPSC_ServiceVersion inclusive;
        };
        struct {
            TPSC_ServiceVersion exclusive;
        };
    };
} TPSC_ServiceBounds;

/**
 * `ServiceRange` allows a caller to specify which versions of a TPS Service are acceptable to
 * it, defining version constraints that are used to constrain the results of service
 * discovery.
 */
typedef struct {
    /**
     * Specifies the lowest acceptable version of a service implementation to be returned in
     * service discovery.
     */
    TPSC_ServiceBounds lowest_acceptable_version;
    /**
     * Specifies the lowest version of a service implementation to be excluded from the
     * results returned by service discovery.
     */
    TPSC_ServiceBounds first_excluded_version;
    /**
     * Specifies the highest version of a service implementation to be excluded from the
     * results returned by service discovery.
     */
    TPSC_ServiceBounds last_excluded_version;
    /**
     * Specifies the highest acceptable version of a service implementation to be returned in
     * service discovery.
     */
    TPSC_ServiceBounds highest_acceptable_version;
} TPSC_ServiceRange;

/**
 * `ServiceSelector` is used in the ServiceDiscovery API call to constrain the list of returned
 * services to those of interest to the caller.
 */
typedef struct {
    /**
     * If not `UUID_NIL`, the returned list of services will only include those whose service_id
     * matches the provided value. If `UUID_NIL`, all service_id values will be returned.
     */
    TPSC_UUID service_id;
    /**
     * If not `UUID_NIL`, the returned list of services will only include those whose
     * secure_component_type matches the provided value. If `UUID_NIL`, all secure components
     * will be returned.
     */
    TPSC_UUID secure_component_type;
    /**
     * If not `UUID_NIL`, the returned list of services will only include those whose
     * secure_component_instance matches the provided value. If `UUID_NIL`, all secure component
     * instances will be returned.
     */
    TPSC_UUID secure_component_instance;
    /**
     * Indicate the acceptable range of versions to provide the requested service
     */
    TPSC_ServiceRange service_version_range;
} TPSC_ServiceSelector;

/**
 * Convenience definition for C API
 */
typedef uintptr_t TPSC_c_size;

/**
 * TPSC_ServiceIdentifier denotes a TPS Service instance, the logical container identifying a
 * particular TPS Service implementation on the Platform.
 */
typedef struct {
    /**
     * A TPSC_UUID which uniquely distinguishes a particular TPS Service on a given platform.
     */
    TPSC_UUID service_instance;
    /**
     * a TPSC_UUID that identifies the service being provided
     */
    TPSC_UUID service_id;
    /**
     * A TPSC_UUID that identifies the Secure Component type providing a service
     */
    TPSC_UUID secure_component_type;
    /**
     * A TPSC_UUID that identifies the instance of a Secure Component on the platform that provides
     * the service
     */
    TPSC_UUID secure_component_instance;
    /**
     * The version of the service
     */
    TPSC_ServiceVersion service_version;
} TPSC_ServiceIdentifier;

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

/**
 * The function requests the cancellation of a pending open session operation or Transaction
 * invocation operation. As this is a synchronous API, this function must be called from a
 * thread other than the one executing the TPSC_SessionOpen or TPSC_Transaction function.
 *
 * **NB:** Cancellation not supported in first release.
 *
 * # Safety
 *
 * This function assumes that the caller ensures the following invariants are maintained:
 *
 * - `transaction` is allocated, correctly aligned and initialized.
 *
 */
uint32_t TPSC_CancelTransaction(TPSC_MessageBuffer *transaction);

/**
 * This function clears the data in a TPSC_Transaction instance.
 * Callers may wish to clear the contents of a TPSC_Transaction for several reasons:
 *
 * - To ensure that the transaction is cleared to a known state before it is re-used.
 * - To ensure that sensitive information is cleared from memory as soon as it is no-longer needed.
 * - To ensure that information does not remain in memory after the transaction has been finalized.
 *
 * # Safety
 *
 * - `transaction` is allocated, properly aligned and initialized.
 */
uint32_t TPSC_ClearTransaction(TPSC_MessageBuffer *transaction);

/**
 * The function closes a session that has been opened with a TPS Service.
 *
 * # Safety
 *
 * This function assumes that the caller ensures the following invariants are maintained:
 *
 * - `session` is allocated, properly aligned and initialized.
 */
uint32_t TPSC_CloseSession(TPSC_Session *session);

/**
 * The function sends a request message and receives a response message within the specified
 * session.
 *
 * # Safety
 *
 * This function assumes that the caller ensures the following invariants are maintained:
 *
 * - `session` is allocated, correctly aligned and initialized.
 * - `transaction` is allocated, correctly aligned and initialized.
 */
uint32_t TPSC_ExecuteTransaction(const TPSC_Session *session,
                                 const TPSC_MessageBuffer *send_buf,
                                 TPSC_MessageBuffer *recv_buf);

/**
 * The function finalizes a transaction structure that has been initialized and associated with
 * the session structure.
 *
 * # Safety
 *
 * This function assumes that the caller ensures the following invariants are maintained:
 *
 * - `transaction` is allocated, properly aligned and initialized.
 * - `buf` is the address of an uninitialized u8 pointer
 */
uint32_t TPSC_FinalizeTransaction(TPSC_MessageBuffer *transaction);

/**
 * The function initializes a transaction structure for use in TPSC_Transaction function. The
 * transaction structure may be used multiple times with the TPSC_Transaction function.
 *
 *  # Safety
 *
 * This function assumes that the caller ensures the following invariants are maintained:
 *
 * - `transaction` is allocated and properly aligned. It is not expected to be initialized on
 *   calling.
 * - `buffer` is allocated and appropriately aligned. It MUST be at least as large as `maxsize`.
 */
uint32_t TPSC_InitializeTransaction(TPSC_MessageBuffer *transaction,
                                    uint8_t *buffer,
                                    uintptr_t maxsize);

/**
 * The function opens a new session between the TPS Client and the TPS Service identified by the
 * service structure.
 *
 * # Safety
 *
 * This function assumes that the caller ensures the following invariants are maintained:
 *
 * - `service` is allocated, properly aligned and initialized.
 * - `connection_data`, if not NULL, is properly aligned and initialized
 * - `session` is properly allocated and aligned. It is not expected to be initialized on entry.
 */
uint32_t TPSC_OpenSession(const TPSC_UUID *service,
                          uint32_t connection_method,
                          const TPSC_ConnectionData *connection_data,
                          TPSC_Session *session);

/**
 * The function discovers all TPS Services available via the TPS Client API that match the selector
 * method.
 *
 * # Safety
 *
 * This function assumes that the caller ensures the following invariants are maintained:
 *
 * - `service_selector` points to a properly allocated, aligned and initialized instance of
 *   `ServiceSelector` which MUST NOT be moved during the call to `service_discovery`.
 * - `max_entries` points to a properly allocated, aligned and initialized usize which holds the
 *   number of entries (not bytes!) allocated for `service_array`
 * - `no_of_services` points to a properly allocated and aligned usize. The value, on calling the
 *   function is the number of elements in `service_array`.
 * - `service_array` points to a properly allocated and aligned instance `no_of_services` instances
 *   of `ServiceIdentifier`.
 *
 * Calls with NULL pointers and where `no_of_services` are zero are caught as errors, but it
 * is not possible for the code to catch initialization and/or alignment errors, where
 * initialization and/or alignment are required.
 */
uint32_t TPSC_ServiceDiscovery(const TPSC_ServiceSelector *service_selector,
                               TPSC_c_size *no_of_services,
                               TPSC_ServiceIdentifier *service_array);

#ifdef __cplusplus
} // extern "C"
#endif // __cplusplus

#endif /* tpsc_client_api_h */
